import java.util.*;
import java.io.*;
import java.net.*;

public class WebServer {
    // Path constants
    static final String perlPath = "/usr/bin/perl";
    static final String envPath = "/usr/bin/env";

    private static class Url {
        String value;
        String path;
        String queryString;
        public Url(String url) {
            value = url;
            int separatorIndex = url.indexOf("?");
            if (separatorIndex == -1) {
                queryString = "";
                path = url;
            } else {
                queryString = url.substring(separatorIndex + 1);
                path = url.substring(0, separatorIndex);
            }
        }
    }

    private static Process exec(String cmd) throws Exception {
        return Runtime.getRuntime().exec(cmd);
    }

    private static void execPerl(Hashtable<String, String> env, String filename, DataOutputStream out,
            BufferedReader reader) throws Exception {
        StringBuilder envString = new StringBuilder();
        for (Map.Entry<String, String> entry : env.entrySet()) {
            envString.append(" ");
            envString.append(entry.getKey());
            envString.append("=");
            envString.append(entry.getValue());
        }
        String cmd = envPath + envString.toString() + " " + perlPath + " " + filename;

        System.out.println("exec: " + cmd);

        Process p = exec(cmd);
        // write content to process if necessary
        if (reader != null) {
            DataOutputStream pOut = new DataOutputStream(p.getOutputStream());
            int contentLength = Integer.parseInt(env.get("CONTENT_LENGTH"));
            char[] content = new char[contentLength];
            reader.read(content, 0, contentLength);
            pOut.writeBytes(new String(content));
            pOut.flush();
        }

        // write output
        byte[] buffer = new byte[1024];
        int count;

        DataInputStream pIn = new DataInputStream(p.getInputStream());
        out.writeBytes("HTTP/1.0 200 OK\r\n");
        while ((count = pIn.read(buffer)) != -1) {
            out.write(buffer, 0, count);
        }
    }

    private static Hashtable<String, String> readHeaders(BufferedReader reader) throws Exception {
        Hashtable<String, String> headers = new Hashtable<String, String>();
        String line;
        while ((line = reader.readLine()).length() > 0) {
            String[] fields = line.split(": ");
            headers.put(fields[0], fields[1]);
        }
        return headers;
    }

    public static void main (String args[]) throws Exception {
        // throws Exception here because don't want to deal
        // with errors in the rest of the code for simplicity.

        // Create a new socket that waits for connection
        int port = Integer.parseInt(args[0]);
        String execPath = System.getProperty("user.home") + "/a1/";
        ServerSocket serverSock = new ServerSocket(port);

        while (true) {
            Socket s = serverSock.accept();

            // The next 3 lines create a buffer reader that
            // reads from the socket s.
            InputStream is = s.getInputStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);

            // The next 2 lines create a output stream we can
            // write to.
            OutputStream os = s.getOutputStream();
            DataOutputStream dos = new DataOutputStream(os);

            // Read HTTP request (empty line signal end of request)
            String input = br.readLine();
            String fields[] = input.split(" ");
            String method = fields[0];
            System.out.println("method: " + method);

            Url url = new Url(fields[1]);
            System.out.println("url: " + url.value);
            System.out.println("queryString: " + url.queryString);
            System.out.println("file: " + url.path);

            String filename = url.path;
            if (filename.startsWith("/")) {
                filename = filename.substring(1);
                filename = execPath + filename;
            }

            Hashtable<String, String> headers = readHeaders(br);
            System.out.println("headers: " + headers);

            // Hash table for env variables
            Hashtable<String, String> env = new Hashtable<String, String>();
            env.put("REQUEST_METHOD", method);
            env.put("QUERY_STRING", url.queryString);

            if (method.equals("POST")) {
                env.put("CONTENT_TYPE", headers.get("Content-Type"));
                env.put("CONTENT_LENGTH", headers.get("Content-Length"));
            }

            // Open and read the file into buffer
            File f = new File(filename);
            if (f.canRead()) {
                if (filename.endsWith("pl")) {
                    execPerl(env, filename, dos, method.equals("POST") ? br : null);
                } else {
                    int size = (int)f.length();

                    FileInputStream fis = new FileInputStream(filename);
                    byte[] buffer = new byte[size];
                    fis.read(buffer);

                    // Now, write buffer to client
                    // (but, send HTTP response header first)
                    dos.writeBytes("HTTP/1.0 200 OK\r\n");
                    if (filename.endsWith("html")) {
                        dos.writeBytes("Content-type: text/html\r\n");
                    } else if (filename.endsWith("jpg")) {
                        dos.writeBytes("Content-type: image/jpeg\r\n");
                    } else if (filename.endsWith("css")) {
                        dos.writeBytes("Content-type: text/css\r\n");
                    }
                    dos.writeBytes("\r\n");
                    dos.write(buffer,  0, size);
                }
            } else {
                // File cannot be read.  Reply with 404 error.
                dos.writeBytes("HTTP/1.0 404 Not Found\r\n");
                dos.writeBytes("\r\n");
                dos.writeBytes("Cannot find " + filename + " leh");
            }

            // Close connection (using HTTP 1.0 which is non-persistent).
            s.close();
        }
    }
}
